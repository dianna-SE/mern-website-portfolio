import React from 'react';
import { Link } from 'react-router-dom';

// Change the function names and links
// to fit your portfolio topic.

function TopicsPage() {
    return (
       <>
            <h2>Web Development Concepts</h2>

            <nav class="local topics">
                <a href="#web-servers">Web Servers</a>
                <a href="#frontend-design">Frontend Design</a>
                <a href="#optimized-images">Optimized Images</a>
                <a href="#favicons">Favicons</a>
                <a href="#css">CSS</a>
                <a href="#forms">Forms</a>
                <a href="#express">Express</a>
                <a href="#javascript">JavaScript</a>
            </nav>
        
            <article id="web-servers">
                <h3>Web Servers</h3>

                <p>
                    The term <strong>index</strong> is used to describe the default name assigned to the home page of a website hosted on a web server (i.e., Apache web server). It serves as the <strong>designated homepage</strong> of a website. The term “index” can also refer to a resource on the server, representing the specific resource that the client has requested. In the provided exploration example, when an HTTP request is made, the resource '/index.html' is utilized on the server side. Further information about this resource can be observed in the request line within the Chrome DevTools debugger.     
                </p>

                <p>
                    In the <strong>Web DevTools</strong> Network tab, file details differ between web server and local computer. Web server files are accessed via HTTP for better accessibility. Network section shows <strong>HTTP Request and Response </strong> data. The client sends the request, and the server generates a response. TCP/IP manages network connection. For web server files, the <strong>request method</strong> is GET, indicating a request to retrieve a resource. The <strong>request header</strong> includes the Accept header text/html, specifying that the client can handle HTML content. In the <strong>response header</strong>, the <strong>status line</strong> has HTTP/1.1 200 OK, indicating a successful request. The response header includes the current date in GMT and Content-Type text/html, indicating the response in HTML format. For local files, limited details are shown with a GET request, 200 OK status code, and only the Content-Type (text/html) in the response header.
                </p>
        
                <p>
                    The favicon.ico file returns a <strong>status code</strong> of 200, indicating a successful request where the server provides the requested content. On the other hand, the main.css and main.js files yield a status code of 404, indicating a client error. These files are referenced in the HTML boilerplate, but are not present in the intended folder. Consequently, the server cannot find these files, resulting in the occurrence of this particular status code.
                </p>
        
                <p>
                    In the given URL 'https://web.engr.oregonstate.edu/~phamdia/a1-phamdia/', the <strong>scheme</strong> indicates the protocol used for requesting the resource, which in this case is 'https://'. The <strong>subdomain</strong> is the part preceding the domain name, which in this URL there are two subdomains – ‘web’ and ‘engr’. This refers to the server within 'oregonstate.edu', the <strong>host domain</strong>. The host domain is a designated name associated with an IP address on a server machine. The <strong>path to resources</strong> refers to the specific location of resources within the server, which in this case is '/~phamdia/a1-phamdia/' for the assignment.
                </p>
            </article>

            <article id="frontend-design">
                <h3>Frontend Design</h3>

                <p><strong>Frontend design</strong> focuses on enhancing user experience by incorporating three key elements: visual design elements, the implementation of a graphical user interface (GUI). When it comes to visual design, maintaining a consistent color scheme, along with consistent fonts, typography scheme, photography, icons, illustrations schemes, and navigation systems are important for strong frontend design. The goal of frontend design is to optimize <strong>usability</strong> achieved by the <strong>Five E's</strong>: effectiveness, efficiency, easy navigation, error-free operation, and an enjoyable or engaging user interface. This applies to various platforms like web applications, desktop applications, and user-operated devices and is designed to improve user experience through efficient interactions within a product or system.</p>

                <dl>
                    <dt><strong>Effective</strong></dt>
                    <dd>The frontend design should be effective in assisting users in achieving their goals and obtaining accurate results.</dd>

                    <dt><strong>Efficient</strong></dt>
                    <dd>It should be efficient, allowing users to perform tasks with minimal steps, thereby enabling quicker results.</dd>

                    <dt><strong>Easy to navigate</strong></dt>
                    <dd>The webpage should be easy to navigate, catering to users with varying levels of web experience, especially beginners. It should offer simple and intuitive methods of clicking and searching, enabling users to easily access desired content and remember how to navigate it in future visits.</dd>

                    <dt><strong>Error-free</strong></dt>
                    <dd>It should be error-free, reducing obstacles and accessibility issues. By identifying common user mistakes, the frontend design should ensure a smooth user experience without encountering roadblocks while fulfilling their needs on the website.</dd>

                    <dt><strong>Enjoyable or engaging</strong></dt>
                    <dd>Frontend design aims to create an enjoyable or engaging user experience that aligns with design and content requirements. It should be enjoyable, encourage return visits, while also prioritizing the four E's (efficiency, effectiveness, easy navigation, and be error-free).</dd>
                </dl>

                <p><strong>Page layout tags</strong> (i.e., header, nav, main, section, articles, asides, and footer) are essential for structuring and organizing content on a web page. They create visual breaks, with a newline before and after the element, to separate different sections of the page. These tags offer a semantic structure, facilitating comprehension of the page layout and its components. They also enable customized styling using CSS, allowing distinct visual presentation for different content types. Moreover, page layout tags assist search engine robots and screen readers in interpreting the arrangement of page elements, enhancing accessibility and machine understanding.</p> 
                <p>The <strong>header</strong> element represents the banner or masthead and displays the name, publisher, and slogan of an application or website, which ensures consistency across pages and occupy minimal space to prioritize content viewability. The <strong>nav</strong> element helps users navigate to different pages or sections, like main menu, search, tools, stories, locations, and legal links. The <strong>main</strong> element holds the main content, such as stories, galleries, tutorials, making it the main focus. The <strong>section</strong> element groups related content, often starting with the highest level of headline. The <strong>article</strong> element represent specific topics with the second-highest level of headline, which are commonly used for multiple articles within a section. Finally, the <strong>footer</strong> element contains legal info, contact details, important links, critical pages links, and copyright statement.</p>

                <ol>
                    <li><strong>Anchors</strong> in web development create hyperlinks to external content, internal content, and between pages. They include opening and closing tags and the href attribute to reference the destination URL when clicked. To link to <strong>external content</strong>, the href attribute contains the URL of the external page to redirect users outside the current webpage when clicked.</li>
                    <li>For <strong>internal content</strong>, when creating a link within a webpage that take users to a specific section of the same page, the id attribute is used to identify that particular element. By assigning an id to an HTML element, it becomes uniquely and simple to identify. To link anchors to internal content, the href attribute of the anchor tag is set to the id value of the target element, with a hash symbol (#) in front of it. When a user clicks on the link, their browser automatically scrolls to that section of the page.</li>
                    <li>Anchors are also used for <strong>page-to-page</strong> navigation, which enables links within a webpage that allows users to jump to a section or location on another page. The href attribute of the anchor tag is set to the URL of the target page.</li>
                </ol>
            </article>

            <article id="optimized-images">    
                <h3>Optimized Images</h3>    
                <p>The <strong>6 major specifications</strong> of images for the web are descriptive file names, small file size, exact dimensions, correct file format, reduced resolution, and color mode. <strong>Descriptive file names</strong> include specific keywords to describe the image content. This is a major specification as it assists with search engine optimization (SEO) and allows search engines to categorize for image searches. <strong>Small file sizes</strong> are often achieved through images compressed by techniques such as lossless and lossy. They maintain acceptable visual quality through srcset and sizes attributes to assist with high resolution images to speed web pages’ load times and are the second specification. <strong>Exact dimensions</strong> in images are a major specification because web design requires specific dimensions and uses cropping and resizing that also help with optimized rendering. The <strong>correct file format</strong> for different types of images is significant as a major specification, as it optimizes visual quality and compatibility between devices and browsers. These include JPG and WebP for photographs, PNG for line-art, and GIF for line-art logos and icons. <strong>Reduced resolutions</strong> include providing multiple image sizes or using responsive design techniques, such as the srcset and size attributes. It is a major specification as this allows you to serve images with resolutions based on the device's capabilities and ensure that quality images are for devices that can display them properly and speed up loading times. Appropriate <strong>color modes</strong> are typically selected by a marketing department’s requirements and guidelines based on the image type and format to ensure consistent print and material design.  PNG, JPG, SVG, and WebP files are recommended to have the RGB color mode and color modes include names, hexadecimal and hexa, RGB and RGBa, and HSL and HSLa.</p>
                <p><strong>JPG</strong> and <strong>WebP</strong> files are the most appropriate file formats for photos, and <strong>PNG</strong> and <strong>GIF</strong> for line art. JPG and WebP files give efficient compression for photographs, providing small file sizes and maintaining rectangular dimensions, which are widely supported by web browsers and devices. Files in JPG are only used for photographic images, while WebP files are commonly used for photographic images, and they offer the possibility of transparent backgrounds through the use of an alpha channel. PNG supports true transparency, allowing line art graphics to be placed over different backgrounds without distortion, and is suitable for graphics with sharp edges, text, and solid colors. GIF is commonly used for line art graphics without transparency and can also have an 8-bit transparency, allowing for antialiasing of edges against one background matte color. They are suitable for graphics with limited colors and simple animations.</p>
            </article>

            <article id="favicons">
                <h3>Favicons</h3>
                <p><strong>Favicons</strong> are website, application, or company logos that are saved in .GIF, .PNG, .ICO and .SVG file formats. They are also known as touch icons or favorites icons, and they are used to quickly identify and launch websites and apps across various platforms, such as the browser tab, smartwatch, cellphone, and search engine displays. They start with a symbol and, after modification, are saved in multiple formats for different browsers and devices to improve compatibility and readability across different devices. Browsers are also able to save the icon and anchor through a bookmark, favorites list, device screen, or search engine results list.</p>
            </article>

            <article id="css">
                <h3>Cascading Stylesheets</h3>

                <p>Incorporating stylesheets in websites and apps help enhance the content’s visual appeal and professional appearance, improve user experience through usability, readability, and legibility, while maintaining consistency by complying with brand guidelines. <strong>Cascading Style Sheets</strong> help developers define HTML element presentations, such as fonts, colors, spacing, and layouts that create visually appealing and well-designed websites. Moreover, by HTML content separation from CSS presentation, stylesheets foster separation of concerns for easier codebase management. External CSS files, whether it is globally linked or imported, offer reusability and enable shared styles across multiple pages and components. This enhances maintainability and efficiency for designing websites. Incorporating stylesheets also help in maintaining style within CSS selectors and its syntax, and customizing classes and IDs using attributes. By incorporating stylesheets, it ensures a cohesive and engaging user experience and assists with management and consistent branding for websites and apps.</p>

                <p>Five ways to incorporate styles are through external CSS, embedding, inline, JavaScript template literals, and using regular JavaScript. The first is <strong>external CSS</strong>, which is done through external files through a .css file extension. It is linked in a link element withing the head element in a website, or imported in a global stylesheet through @import. Furthermore, it is a way to incorporate styles because it creates a clear separation of concerns by keeping the HTML content separate while promoting modularity, reusability and quicker page loading. The second is <strong>embedded styles in HTML</strong> by using style tags, and incorporates style for one-off style changes for a specific section of the page. The third is <strong>inline style</strong> which are directly applied to HTML elements using the style attribute. It incorporates styles by allowing a quick and specific styling. The fourth is <strong>JavaScript template literals</strong> by using a styled component library to create custom styled elements. This is another way to incorporate styles for component-based or dynamic styling that is meant for JavaScript-focused styling. The last one is through <strong>regular JavaScript</strong> through the manipulation of the Document Object Model (DOM) and incorporates style because of the direct interactions with DOM elements to modify the style properties. Keep in mind that styles embedded in HTML and JavaScript files are one-off style changes, and thus are not permanent.</p>

            </article>


            <article id="forms">
                <h3>Forms</h3>
                <p>There are six major goals of form accessibility. The first is to <strong>elicit clear and explicit instructions</strong> right on the top of the form in the labels and is for accessibility through placeholder values, which prove useful for users with visual capabilities. 
                The second is <strong>informing users about data collections</strong> and required fields. This is used to enhance trust and transparency with the purpose when gathering the data. The next major goal is <strong>setting autofocus</strong> within the first field, and it is an accessibility due to the ability for a keyboard-less option when users type in the data. The fourth is ensuring that all form controls can be filled without using the mouse or trackpad, another accessibility goal. The fifth is adding <strong>tab indexing in complex forms</strong> to establish a clear order for filling out the fields, and the last is <strong>ensuring that messages are validated</strong> and easily readable. It is considered a major goal of accessibility for forms because since HTML browser messages are not screen-readable, validated messages assist with this.</p>

                <p>The first major tag is the <strong>form tag</strong>, where any content besides a form can be placed inside it and includes an input element that contains data or select options to type. The textarea control is used for text with multiple lines that can be stretched vertically or horizontally using CSS styling. Form tags have the action attribute that tells users where the request should be sent from the form, which, after submission, the data input is sent to the URL listed within the attribute by the browser. If there are no action attributes, the same URL will be used when submitted. Action attribute values are relative path (for submitting forms to the same website as the downloaded form) or absolute URL. The second attribute is method, which lists what the HTTP method is, so it is used in conjunction with the HTTP request during form submission. The values in this attribute are case-insensitive, are GET (default) or POST (used for assignment).
                    The purpose of <strong>fieldset and legend tags</strong> are to make forms visually-impaired accessible. Fieldset tags are used for complicated forms with a default gray border, while legend tags are used to separate logical groups of different form controls and include prompts to help users understand what the groups are for. The legend tag’s default setting is that it is placed on top of the fieldset gray border.  Fieldset attributes are not listed in the exploration but include disabled, form, name, class, and id.                               
                </p>
                <p>
                    <strong>Label tags</strong> help usually screen reader users understand what their data entry is meant for through control pairing. Attributes include for=”” that is used alongside the form control id=””. 
                    <strong>Input tags</strong> are used as a data-input tag and is a tool to capture user input in web forms. Input tags have attributes such as type, where type can be email – where different patterns can be required. Checkbox is another type where name and value attributes are required, and multiple related values can be selected (the server only identifies checked ones from the HTTP request. Radio is another type that lets users select only one value, where nothing is sent from the HTTP request if it is not selected. Another attribute is name, where when a server receives the form submission, this attribute informs the server what each data item is corresponded with. Required is an important attribute for expecting critical responses such as name, email, and message. This helps prevent malicious bots from submitting the form indefinitely, which can cause a server overload and ultimately crash.
                </p>
                <p>
                    <strong>Select with options tags</strong> displays a drop-down list of choices that the user can select. The name attribute is used for this element, and option tags are within the select tag and are used to describe what is in the drop-down feature. Selected attribute is to use as a default choice for the drop-down feature and value is an attribute for option tags and used to be sent for the request to receive.
                    <strong>Textarea tags</strong> provide multiple lines of text for users to type in, and there are many attributes such as id, name, rows, cols, and more listed in the MDN Web Docs.
                    <strong>Button tags</strong> are meant for when a mouse or keyboard is clicked or pressed, respectively, a voice command, or a finger touch and is activated through the attribute action that is indicated by the form tag.
                </p>

                <p>There are many form style recommendations to improve usability. Adding styles such as <strong>margin and padding</strong> to the fieldset help prevent the labels and controls from overlapping on the edges to improve usability. Fieldsets consist of legends that prompt the user or help clarify the group of form controls, and are used with <strong>positioning properties</strong> to improve the description. Labels use the display property to distinguish from inline with form controls, and a smaller font size is suggested. <strong>Padding and font-size</strong> should be increased to improve legibility and accessibility for larger fingers, and are applied for tags such as input, button, textarea, and select. <strong>Autofocus</strong> is an input attribute used for usability by allowing users to type in the form without the need for a mouse click or input touch. <strong>Color styling</strong> will also help users to easily identify where they are typing and when they are typing. For examples, statues with ::focus can have color styling. The status *:required helps users identify the fields to fill in and to ignore, and <strong>border styling</strong> assists with this usability improvement. Keep in mind that the CSS asterisk means all, and this indicates all selectors with the required attribute and used for usability by warning users to fill in required fields. This functionality is added as class=”required”. <strong>Changing border colors</strong> such as gray to red for the invalid input and green for the valid input helps users understand if their input satisfies the required pattern with the correct amount and type of characters. The placeholder <strong>text color change</strong> is used for usability when there are inputs with mouse focus and a color change is indicated. Updating a checked box or radio button when checked or not by adding a label after the input HTML tag also helps identify items that are selected or not. Adding background to attributes :disabled, then :enabled after input tags assist with complex forms by preventing form access unless the user fills in the needed input. For select and option elements, they tend to be more difficult to style for usability and are recommended to increase the font-size, and padding to reach a similar style as input.</p>
            </article>



            <article id="express">
                <h3>Express</h3>
                <p>
                    <strong>Node</strong> or <strong>Node.js</strong> is a free, available, and versatile runtime environment to help build server-side and networking applications. It is developed using JavaScript, and Node.js applications are executed on macOS, Microsoft Windows, and Linux operating systems while providing a great range of JavaScript modules to facilitate web application development in the platform. 
                </p>
                <p>
                    The <strong>Node Package Manager </strong> is a command-line utility and online repository that helps improve the web development experience by managing Node.js packages and dependencies. This allows developers to easily install, publish, and manage packages that are required for Node.js applications. Commands used in this course are npm init, npm install package, and npm start. The command npm init initializes a new Node.js application and builds a package.json file (a JSON object that contains meta-data) that describes the Node.js application properties. The command npm install will install packages dependent on the user’s application through a module, which is one file, or packages which are used to bundle one or more modules. Downloaded packages are updated in package.json and adds the package to the dependencies’ property within the file. The command npm install without any arguments will download the package from the online repository in the .json file and into the node_modules directory. This is used for already existing package.json files with dependencies. The command npm start starts a Node.js application by observing the start property in package.json and follows the command listed as the value within the property. Using npm install for nodemon helps with web development by allowing a node application restart for any file changes identified in the directory.
                </p>    
                <p>
                    <strong>Express or Express.js</strong> is a framework to assist in building web applications using Node.js. Express utilizes application programming interfaces for tasks that are needed within the web application, such as the ability to get, post, delete data, and describe received data ports and routes. The framework also gives developers the ability to serve static files in directories such as from public folders, while creating dynamic templates that incorporate data to construct responses. This enables development of more advanced web applications that can handle different types of content and data manipulation.
                </p>
            </article>

            <article id="javascript">
                <h3>JavaScript</h3>

                <p>The main data types in JavaScript include: a number, a boolean value “true” or “false”, a string, a symbol, special values “undefined” and “null”, and an object. Primitive data types are any values other than an object type. <strong>Numbers</strong> are the only number data type and are double-precision floating-point numbers. Strings are sometimes converted to numbers through some mathematical JavaScript operations. There are several built-in functions to enforce recognizing data types and preventing automatic type conversion, such as parseFloat(), parseInt(), toString(), toLocaleString(), Math.trunc(), and Math.rount(). The value “NaN” denotes an expected number value that is not a number. <strong>Boolean values</strong> only have two values, a “true” or “false” and should only be used within conditions, otherwise it would lead to Wat!. <strong>Strings</strong> are enclosed in a single or double quote, and two of the same strings in either a single quote or a double quote are both the same values. Strings include string literals that have only characters, and template literals are strings that contain expressions enclosed in backticks and inside brackets. <strong>A symbol is used to create unique, immutable values and are used as property keys within objects to create properties. Special values “undefined” and “null”</strong> are used in various cases, such as not initializing a declared variable, having fewer arguments than the number of parameters in a called function, or a function that does not return a value. The value “undefined” is suggested as a return or assignment value rather than “null”. <strong>Objects</strong> consists of name-value pairs, where the name are called properties. Objects follow CRUD in which the object properties can be created or added, read, updated, or deleted. Object properties are created and updated through the “.” operator on the variable inside the assignment statement. Properties are read using the ”.” operator, and a property that does not exist will return “undefined”. Deleted properties are completed through the “delete” operator. For objects, using the “const” variable will prevent it from being reassigned to a different value; however, properties can still be modified. Retrieving names from all the properties of an object includes using “Object.keys()”.</p>

                <p>Many of the object features are listed above, but <strong>objects</strong> are used by the “.” operator, the method “Object.keys” to get the names of all properties of the object, and the four actions of CRUD – create or add, read, update, and delete properties within the object. <strong>Arrays</strong> are objects whose property names are of string values. Arrays are commonly used by accessing elements inside an array. It is used through indexing, “Array.isArray()”, length (to get the number of elements), “push()” (to add elements to the end of the array), and “pop()” (to remove an element from the end of the array). Arrays also use “includes()” which identifies whether a value exists in the array.  <strong>JSON</strong>, known as JavaScript Object Notation, is used to convert an object in a program to or from a JSON-formatted string. Many programming languages provide libraries for JSON, and 
                    due to its language-independent nature, the JSON format enables data exchange between programs written in different programming languages. Strings in JSON format are delimited by double quotes and separated by command in array elements.
                </p>

                <p><strong>Conditionals and loops</strong> are used to make decisions between statements in the code. In programming, the <strong>if statement</strong> is commonly used to execute a block of code when a specified expression is identified to be true. There is also the if-then-else statement, which allows us to include multiple else if branches with their respective expressions. A final else branch without an expression is optionally used, which is executed when none of the expressions in the previous branches evaluate to true. One true brace styles are commonly used as a style where an opening brace is added to the same line as the condition. Switch statements are used for if-then-else statements, and the expression evaluates once before the matching case branch executes. A break statement ends after the code for the branch executes, and a default branch executes only if the matching case does not exist. Conditionals or ternary operators are another way to use conditionals and loops, and is used through ‘condition ? expression1 : expression 2’. The condition is evaluated, if true, then the first expression is evaluated with the returned value; if it is not true, then the second expression is evaluated with the returned value. Any type values are contained within conditions, such as 0, NaN, null, and undefined as false. Equality testing such as strict equality operators strictly compare values by specific data types, or when their objects are the exact same object. Loose equality operators are also used as conditions but automatically convert values to a common type, so it is not recommended. Comparison testing, such as using comparison operators, are meant to be strictly compare values by either numbers or strings, and not both to prevent automatic conversion. Operators are not meant to be used for other data types besides strings and numbers. Boolean operators also enforce automatic conversion to which boolean values should be used with operands for these. For <strong> loops</strong>, the while statement ensures the expression to be evaluated and while it is true, the while loop will keep executing within the body. The do while statement executes the first body of code once before it enters the body of the while loop. A for loop executes a block of code a specific number of times and is commonly used for element iteration. The initialization statement executes once and for every execution of the loop, the condition is evaluated. The for loop executes if the condition is true, and the repeating statement is executed and continues until the condition is false. The for of statement iterates over elements in a string or an array and compares the user input with the object data file. It provides a strict equality to compare that the value matches with the object value, followed by endpoint routing for the response in JavaScript. The for in statement iterates over object properties, and it does not have to be in order. Object properties can also be iterated through for of statement with Object.keys(). Break statements break the loop for a true condition. And the continue statement skips some statements in the loop body when a certain condition is satisfied without leaving the loop itself.</p>

                <p><strong>Object-oriented programming</strong> is a programming model that organizes data and behavior into objects. An object should have an identity, state, and behavior and in JavaScript, objects are created without a class declaration. Identity is where an object is distinct. A state is where an object has its own state in the properties, and behavior is where functions are first-class value, and are added to an object by adding properties of function values. Modern JavaScript and other programming languages have a similar class syntax for this. An object is a set of name-value pairs, where the names are properties of the object. Object properties can be added, read, modified, and deleted. <strong>Prototypes</strong> are used in situations where there are many objects with the same properties, and used so that common properties are declared once while creating many objects with similar properties. It is a special object that retrieves common properties of many objects, and objects have prototypes with internal properties. Prototypes are used to define common function-valued properties and methods shared by multiple objects. These prototypes act as blueprints, allowing object creations with similar characteristics. When creating objects, arguments can be passed to the prototype functions to set specific property values. Objects created from the prototype inherit its methods through the prototype chain, followed by returning the new and created object with its shared functionality. Classes are used in object-oriented programming and can have constructors, and its instances are created using new, followed by the class name. Static methods and fields are class properties and, when shared by class instances, are defined as static properties. Static properties are used through the prefix, followed by the name of the class. Object.keys() is an example of a static method. Subclasses are also used for this programming model through ‘extend’, which extends the superclass. The subclass maintains the properties, fields, and methods of the superclass and can also have its own properties, along with overriding inherited methods through its own definition.</p>

                <p><strong>Functional programming</strong> is characterized by functions that have 'first-class' values, meaning they can be assigned to variables. It also involves defining functions that can take other functions as arguments and even return other functions. A higher-order function receives a function or functions as an argument. JavaScript has many built-in higher-order functions and methods, such as map, which is a collection of elements stored in a key-value pair, and can hold both objects and primitive values. Array.filter() applies a function that takes one argument and returns true or false into the array, and then returns the array that has the element that returned as true. Function expressions are used when higher-order functions passed from functions are not useful, and anonymous functions come into play. These are expressions that returns a function using the function keyboard or the arrow function syntax, such as for functions using function expressions. Closures are compared to regular functions and in a regular function, the variables used are either parameter passed to the function or local variables defined within it. Closures include one or more variables known as free variables, which are neither parameters nor local variables. Free variables exist when the closure is defined, but their values can change before the closure execution. Closures differentiate from a regular function by the ability to capture and store variables from their environment. Closures can access these captured variables even at a later time when it is executed. In JavaScript, a free variable in a closure is a reference to the captured variable, and any changes to the captured variable's value will be reflected in the free variable inside the closure. Function arguments are meant for uneven number of arguments compared to the number of parameters of declaration. Missing arguments are undefined and extra ones are ignored, so when specifying default arguments, the default value of the argument is used instead when the default value is undefined. Exception errors can also be used instead of returning undefined and can be used with the catch clause. The throw statement is used to ‘throw’ an exception error and will not continue to the next statement but rather, the catch clause will execute. This can be inside the function, or called from another function through direct or indirect means, or terminates if it is not caught. JavaScript also has a built-in method Error() that allows a custom message for the error. A try and catch clause can also be used to catch exceptions, and the program skips the entire code within the try block if an exception is thrown in the catch clause (i.e., exception handler). The instanceof keyword can help indicate thrown exception types and improvise the response. A ‘finally clause’ executes regardless of an occurring exception and ensures the resource to be released from the database connection, an open file, or a network connection. It is also used through the catch clause. All of these features are used within functional programming.</p>
            </article>

            </>
    );
}
export default TopicsPage;